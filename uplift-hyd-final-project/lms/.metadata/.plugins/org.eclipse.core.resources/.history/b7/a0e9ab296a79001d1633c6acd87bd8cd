package com.te.lms.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.te.lms.dto.ApproveDto;
import com.te.lms.dto.BatchDto;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.RejectDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.email.Email;
import com.te.lms.exception.BatchesNotFoundException;
import com.te.lms.exception.EmployeeCannotBeApprovedException;
import com.te.lms.exception.EmployeeNotFoundExcpetion;
import com.te.lms.exception.NoMentorsFoundException;
import com.te.lms.response.RegistrationResponse;
import com.te.lms.service.AdminService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "/admin")
public class AdminController {

	private final AdminService adminService;
	private final Email email;

	@PostMapping(path = "/register/mentor")
	public RegistrationResponse<String> adminRegister(@RequestBody MentorDto mentorDto) {
		Optional<String> optionalmentor = adminService.register(mentorDto);
		if (optionalmentor.isPresent()) {
			String message = "Hello" + mentorDto.getMentorName()
					+ "you have been promoted from a employee to a mentor,please use these credentials for logging in \n"
					+ optionalmentor.get();
			String subject = "Congratulations";
			String emailId = mentorDto.getEmailId();
			email.sendEmail(message, emailId, subject);
			return new RegistrationResponse<String>("mentor has been registered Successfully");
		}
		throw new RuntimeException("unable to register the mentor");

	}

	@PostMapping(path = "/register/batch")
	public RegistrationResponse<String> newBatch(@RequestBody BatchDto batchDto) {
		Optional<String> optionalbatch = adminService.createBatch(batchDto);
		if (optionalbatch.isPresent()) {
			return new RegistrationResponse<String>("your batch has been Registered Successfully");
		}
		throw new RuntimeException("unable to Register your batch");
	}

	@PutMapping(path = "/update/{empId}")
	public RegistrationResponse<String> updateMentor(@RequestBody UpdateMentorDto updateMentorDto,
			@PathVariable(name = "empId") String empId) {

		Optional<Boolean> optionalMentorId = adminService.updateMentor(updateMentorDto, empId);

		return new RegistrationResponse<String>("mentor is updated successfully");
	}

	@PutMapping(path = "/mentor/delete/{empId}")
	public RegistrationResponse<String> deleteMentor(@PathVariable(name = "empId") String empId) {

		Boolean mentorRemoved = adminService.deleteMentor(empId);
		if (mentorRemoved) {

			return new RegistrationResponse<String>("mentor has been removed successfully", empId);
		}
		throw new RuntimeException("unable to delete the mentor");
	}

	@PutMapping(path = "/batch/delete/{empId}")
	public RegistrationResponse<String> deleteBatch(@PathVariable(name = "batch") String batchId) {

		Boolean batchRemoved = adminService.deleteBatch(batchId);
		if (batchRemoved) {

			return new RegistrationResponse<String>("mentor has been removed successfully", batchId);
		}
		throw new RuntimeException("unable to delete the batch");
	}

	@GetMapping(path = "/mentors")
	public ResponseEntity<List<MentorDto>> getMentors() {
		Optional<List<MentorDto>> mentorsFromDb = adminService.getMentors();
		if (mentorsFromDb.isPresent()) {
			return ResponseEntity.ok(mentorsFromDb.get());
		}
		throw new NoMentorsFoundException("no mentors found");
	}
	
	@GetMapping(path = "/batches")
	public ResponseEntity<List<BatchDto>> getBatch() {
		Optional<List<BatchDto>> batchesFromDb = adminService.getBatchDetails();
		if (batchesFromDb.isPresent()) {
			return ResponseEntity.ok(batchesFromDb.get());
		}
		throw new BatchesNotFoundException("No batches Found");
	}
	
	@PostMapping(path = "/requestlist/approve/{empId}")
	public RegistrationResponse<String> approveRequest(@PathVariable(name = "empId") String empId,
			@RequestBody ApproveDto approveDto) {
		Optional<MessageDto> optMessage = adminService.ApproveEmployee(empId, approveDto);
		if (optMessage.isPresent()) {
			String message = optMessage.get().getMessage();
			String subject = "Greeetings from Technoelevate";
			String emailId = optMessage.get().getEmaild();
			email.sendEmail(message, emailId, subject);
			return new RegistrationResponse<String>("employee has been approved", null);
		}
		throw new EmployeeCannotBeApprovedException("employee cannot be approved");
	}
	
	@PutMapping(path = "/requestlist/reject/{empId}")
	public RegistrationResponse<String> rejectRequest(@PathVariable(name = "empId") String empId,
			@RequestBody RejectDto rejectDto) {
		Optional<MessageDto> optMessage = adminService.rejectEmployee(empId, rejectDto);
		if (optMessage.isPresent()) {
			String message = optMessage.get().getMessage();
			String subject = "Greeetings from Technoelevate";
			String emailId = optMessage.get().getEmaild();
			email.sendEmail(message, emailId, subject);
			return new RegistrationResponse<String>("employee has been  rejected succesfully", null);
		}
		throw new EmployeeNotFoundExcpetion("unable to find the employee");
	}

	
}
