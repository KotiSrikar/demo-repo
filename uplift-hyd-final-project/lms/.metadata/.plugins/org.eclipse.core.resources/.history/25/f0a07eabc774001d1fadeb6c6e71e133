package com.te.lms.service.implementation;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.te.lms.dto.AddressDetailsDto;
import com.te.lms.dto.ContactDto;
import com.te.lms.dto.EducationDetailsDto;
import com.te.lms.dto.ExperienceDto;
import com.te.lms.dto.RegistrationDto;
import com.te.lms.dto.TechnicalSkillsDto;
import com.te.lms.dto.UpdateDto;
import com.te.lms.entity.AddressDetails;
import com.te.lms.entity.BankDetails;
import com.te.lms.entity.Contact;
import com.te.lms.entity.EducationDetails;
import com.te.lms.entity.Employee;
import com.te.lms.entity.Experience;
import com.te.lms.entity.SecondaryInfo;
import com.te.lms.entity.TechnicalSkills;
import com.te.lms.repository.EmployeeRepository;
import com.te.lms.service.EmployeeService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class EmployeeServiceImpl implements EmployeeService {

	private final EmployeeRepository employeeRepository;
//	private final SecondaryInfoRepository secondaryInfoRepository;
//	private final BankDetailsRepository bankDetailsRepository;
//	private final EducationDetailsRepository educationDetailsrepository;

	@Override
	public Optional<String> register(RegistrationDto registrationDto) {
		Employee employee = new Employee();
		SecondaryInfo secondaryInfo = new SecondaryInfo();
		BankDetails bankDetails = new BankDetails();
		List<EducationDetails> educationDetails = Lists.newArrayList();
		List<AddressDetails> addressDetails = Lists.newArrayList();
		List<Experience> experience = Lists.newArrayList();
		List<Contact> contacts = Lists.newArrayList();
		List<TechnicalSkills> technicalSkills = Lists.newArrayList();

		BeanUtils.copyProperties(registrationDto, employee);
		BeanUtils.copyProperties(registrationDto.getSecondaryInfo(), secondaryInfo);
		BeanUtils.copyProperties(registrationDto.getBankDetails(), bankDetails);

		employee.setBankDetails(bankDetails);
		bankDetails.setEmployee(employee);

		employee.setSecondaryInfo(secondaryInfo);
		secondaryInfo.setEmployee(employee);

		for (EducationDetailsDto educationalDetailsDto : registrationDto.getEducationDetails()) {
			EducationDetails educationalDetailsEntity = new EducationDetails();
			BeanUtils.copyProperties(educationalDetailsDto, educationalDetailsEntity);
			educationDetails.add(educationalDetailsEntity);
		}
		employee.setEducationDetails(educationDetails);

		for (EducationDetails educationalDetails2 : educationDetails) {
			educationalDetails2.setEmployee(employee);
		}

		for (AddressDetailsDto addressDetailsDto : registrationDto.getAddressDetails()) {
			AddressDetails addressDetailsEntity = new AddressDetails();
			BeanUtils.copyProperties(addressDetailsDto, addressDetailsEntity);
			addressDetails.add(addressDetailsEntity);
		}
		employee.setAddressDetails(addressDetails);

		for (AddressDetails addressDetails2 : addressDetails) {
			addressDetails2.setEmployee(employee);
		}

		for (ExperienceDto experienceDto : registrationDto.getExperience()) {
			Experience experienceEntity = new Experience();
			BeanUtils.copyProperties(experienceDto, experienceEntity);
			experience.add(experienceEntity);
		}
		employee.setExperience(experience);

		for (Experience experience2 : experience) {
			experience2.setEmployee(employee);
		}

		for (ContactDto contactDto : registrationDto.getContact()) {
			Contact contactsEntity = new Contact();
			BeanUtils.copyProperties(contactDto, contactsEntity);
			contacts.add(contactsEntity);
		}
		employee.setContact(contacts);

		for (Contact contact : contacts) {
			contact.setEmployee(employee);
		}

		for (TechnicalSkillsDto technicalSkillsDto : registrationDto.getTechnicalSkills()) {
			TechnicalSkills technicalSkillsEntity = new TechnicalSkills();
			BeanUtils.copyProperties(technicalSkillsDto, technicalSkillsEntity);
			technicalSkills.add(technicalSkillsEntity);
		}
		employee.setTechnicalSkills(technicalSkills);

		for (TechnicalSkills technicalSkills2 : technicalSkills) {
			technicalSkills2.setEmployee(employee);
		}
	
		employeeRepository.save(employee);
		
		return Optional.ofNullable(employee.getEmployeeId());
	}

	@Override
	public Optional<Boolean> update(String empId, UpdateDto updateDto) {
		Optional<Employee> employee = employeeRepository.findById(empId);
		if(employee.isPresent()) {
			Employee employee1 = employee.get();
			employee1.setBloodGroup(updateDto.getBloodGroup());
			employee1.setEmployeeDOB(updateDto.getEmployeeDOB());
			employee1.setEmployeeNationality(updateDto.getEmployeeNationality());
			
//			Optional<SecondaryInfo> optionalSecondaryInfo = secondaryInfoRepository.findSecondaryInfo(empId);
//			if(optionalSecondaryInfo.isPresent()) {
//				SecondaryInfo secondaryInfo = optionalSecondaryInfo.get();
//				BeanUtils.copyProperties(updateDto.getSecondaryInfoDto(), secondaryInfo);
//				secondaryInfo.setEmployee(employee1);
//				employee1.setSecondaryInfo(secondaryInfo);
//			}
//			
//			Optional<BankDetails> optionalBankDetails = bankDetailsRepository.findBankDetails(empId);
//			if(optionalBankDetails.isPresent()) {
//				BankDetails bankDetails = optionalBankDetails.get();
//				BeanUtils.copyProperties(updateDto.getBankDetailsDto(), bankDetails );
//				bankDetails.setEmployee(employee1);
//				employee1.setBankDetails(bankDetails);
//			}
//			
//			Optional<EducationDetails> optionalEducationDetails = educationDetailsrepository.findEducationDetails(empId);
//			if(optionalEducationDetails.isPresent()) {
//				EducationDetails educationDetails = optionalEducationDetails.get();
//				BeanUtils.copyProperties(updateDto.getEducationDetailsDto(),educationDetails);
//				educationDetails.setEmployee(employee1);
//				employee1.setEducationDetails(educationDetails);
//			}
			
			SecondaryInfo secondaryInfo2 = employee1.getSecondaryInfo();
			if(secondaryInfo2!=null) {
				BeanUtils.copyProperties(updateDto.getSecondaryInfoDto(),secondaryInfo2, new String[] {"sno"});
				secondaryInfo2.setEmployee(employee1);
				employee1.setSecondaryInfo(secondaryInfo2);
			}
			
			
			
			List<EducationDetails> educationDetails  = employee1.getEducationDetails();
			List<EducationDetails> educationDetails2 = Lists.newArrayList();
			 if(educationDetails!=null) {
				 
				 for (EducationDetailsDto educationDetailsDto : updateDto.getEducationDetailsDto()) {
				    EducationDetails educationDetailsEntitiy = new EducationDetails();
				    BeanUtils.copyProperties(educationDetailsDto, educationDetailsEntitiy);
				    educationDetails2.add(educationDetailsEntitiy);
				}
				 
				 for(int i=0;i<educationDetails2.size();i++) {
					 BeanUtils.copyProperties(educationDetails2.get(i), educationDetails.get(i),new String[] {"educationId"});
				 }
				 
				 employee1.setEducationDetails(educationDetails);
			 }
			
			employeeRepository.save(employee1);
		}
		return null;
	}

}
