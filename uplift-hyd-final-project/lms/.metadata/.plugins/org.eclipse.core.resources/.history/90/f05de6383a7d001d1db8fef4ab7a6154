package com.te.lms.service.implementation;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.te.lms.dto.AddressDetailsDto;
import com.te.lms.dto.ApproveDto;
import com.te.lms.dto.BankDetailsDto;
import com.te.lms.dto.BatchDto;
import com.te.lms.dto.ContactDto;
import com.te.lms.dto.EducationDetailsDto;
import com.te.lms.dto.EmployeeDto;
import com.te.lms.dto.ExperienceDto;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.RejectDto;
import com.te.lms.dto.SecondaryInfoDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.TechnicalSkillsDto;
import com.te.lms.dto.TechnologiesDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.email.Password;
import com.te.lms.entity.AddressDetails;
import com.te.lms.entity.AppUser;
import com.te.lms.entity.Batch;
import com.te.lms.entity.Contact;
import com.te.lms.entity.EducationDetails;
import com.te.lms.entity.Employee;
import com.te.lms.entity.Experience;
import com.te.lms.entity.Mentor;
import com.te.lms.entity.RequestList;
import com.te.lms.entity.Roles;
import com.te.lms.entity.Skills;
import com.te.lms.entity.TechnicalSkills;
import com.te.lms.entity.Technologies;
import com.te.lms.enums.BatchStatus;
import com.te.lms.enums.EmployeeStatus;
import com.te.lms.enums.Status;
import com.te.lms.exception.BatchDetailsNotFoundException;
import com.te.lms.repository.AppUserRepository;
import com.te.lms.repository.BatchRepository;
import com.te.lms.repository.EmployeeRepository;
import com.te.lms.repository.MentorRepository;
import com.te.lms.repository.RequestRepository;
import com.te.lms.repository.RolesRepository;
import com.te.lms.repository.SkillsRepository;
import com.te.lms.service.AdminService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AdminServiceImpl implements AdminService {

	private final MentorRepository mentorRepository;
	private final BatchRepository batchRepository;
	private final RolesRepository rolesRepository;
	private final AppUserRepository appUserRepository;
	private final SkillsRepository skillsRepository;
	private final RequestRepository requestRepository;
	private final EmployeeRepository employeeRepository;

	@Override
	public Optional<String> register(MentorDto mentorDto) {

		Mentor mentor = new Mentor();
		Password password = new Password();

		BeanUtils.copyProperties(mentorDto, mentor);
		mentor.setMentorStatus(EmployeeStatus.ACTIVE);
		List<Skills> skills = Lists.newArrayList();

		for (SkillsDto skillsDto : mentorDto.getSkillsDto()) {
			Skills skillsEntity = new Skills();
			BeanUtils.copyProperties(skillsDto, skillsEntity);
			skills.add(skillsEntity);
			skillsEntity.setMentor(mentor);
		}

		mentor.setSkills(skills);

		Optional<Roles> optionalRole = rolesRepository.findByRoleName("ROLE_MENTOR");
		if (optionalRole.isPresent()) {
			AppUser appUser = AppUser.builder().username(mentor.getEmployeeId()).password(password.passwordGenerator())
					.roles(Lists.newArrayList()).build();

			appUser.getRoles().add(optionalRole.get());
			Roles roles = Roles.builder().roleName("ROLE_MENTOR").appUser(Lists.newArrayList()).build();
			roles.getAppUser().add(appUser);
			appUserRepository.save(appUser);
			mentorRepository.save(mentor);
			return Optional
					.ofNullable("username :" + appUser.getUsername() + "\n" + "password :" + appUser.getPassword());
		}

		return Optional.ofNullable(mentor.getEmployeeId());
	}

	@Override
	public Optional<String> createBatch(BatchDto batchDto) {

		Batch batch = new Batch();
		BeanUtils.copyProperties(batchDto, batch);

		List<Technologies> technologies = Lists.newArrayList();

		Optional<Mentor> mentorName = mentorRepository.findByMentorName(batchDto.getMentorName());
		Mentor mentor = mentorName.get();
		batch.setMentor(mentor);
		mentorName.get().setBatch(batch);

		for (TechnologiesDto technologiesDto : batchDto.getTechnologiesDto()) {
			Technologies technologiesEntity = new Technologies();
			BeanUtils.copyProperties(technologiesDto, technologiesEntity);
			technologies.add(technologiesEntity);
			technologiesEntity.getBatch().add(batch);
		}
		batch.setStatus(Status.ACTIVE);
		batch.setTechnologies(technologies);
		batchRepository.save(batch);
		return Optional.ofNullable(batchDto.getBatchId());
	}

	@Override
	public Optional<Boolean> updateMentor(UpdateMentorDto updateMentorDto, String empId) {
		Optional<Mentor> mentorFromDB = mentorRepository.findById(empId);
		if (mentorFromDB.isPresent()) {
			Mentor mentor = mentorFromDB.get();
			mentor.setEmailId(updateMentorDto.getEmailId());
			mentor.setMentorName(updateMentorDto.getMentorName());
			List<Skills> skills = mentor.getSkills();
			List<Skills> skills2 = Lists.newArrayList();
			if (skills != null) {
				for (SkillsDto skillsDto : updateMentorDto.getSkillsDto()) {
					Skills skillsEntity = new Skills();
					BeanUtils.copyProperties(skillsDto, skillsEntity);
					skills2.add(skillsEntity);
					skillsEntity.setMentor(mentor);
				}
				mentor.setSkills(skills2);
			}
			mentorRepository.save(mentor);
			return Optional.ofNullable(true);
		}
		return Optional.ofNullable(false);
	}

	@Override
	public Boolean deleteMentor(String empId) {
		Optional<Mentor> mentor = mentorRepository.findById(empId);
		if (mentor.isPresent()) {
			mentor.get().setMentorStatus(EmployeeStatus.TERMINATED);
			mentorRepository.save(mentor.get());
			return true;
		}
		return false;
	}

	@Override
	public Boolean deleteBatch(String batchId) {
		Optional<Batch> batch = batchRepository.findById(batchId);
		if (batch.isPresent()) {
			batch.get().setBatchStatus(BatchStatus.COMPLETED);
			batchRepository.save(batch.get());
			return true;
		}
		return false;
	}

	@Override
	public Optional<MessageDto> ApproveEmployee(String empId, ApproveDto approveDto) {
		Optional<RequestList> empFromRequestList = requestRepository.findById(empId);
		if (empFromRequestList.isPresent()) {
			Optional<Employee> employeeFromDb = employeeRepository.findById(empId);
			if (employeeFromDb.isPresent()) {
				Optional<Roles> optRoles = rolesRepository.findByRoleName("ROLE_EMPLOYEE");
				if (optRoles.isPresent()) {
					AppUser appUser = AppUser.builder().username(empId).password("Welcome123")
							.roles(Lists.newArrayList()).build();
					appUser.getRoles().add(optRoles.get());
					Roles role = Roles.builder().roleName("ROLE_EMPLOYEE").appUser(Lists.newArrayList()).build();
					role.getAppUser().add(appUser);
					Optional<Batch> batch = batchRepository.findById(approveDto.getBatchId());
					if (batch.isPresent()) {
						employeeFromDb.get().setBatch(batch.get());
						batch.get().getEmployee().add(employeeFromDb.get());
						employeeFromDb.get().setEmployeeStatus(Status.ACTIVE);
						employeeRepository.save(employeeFromDb.get());
						appUserRepository.save(appUser);
						batchRepository.save(batch.get());
						requestRepository.deleteById(empId);
						String message = "Hello " + employeeFromDb.get().getEmployeeName() + "\n"
								+ " welcome to the team of techno elevate \n" + "username : " + appUser.getUsername()
								+ "\n" + " password :" + appUser.getPassword();
						MessageDto messageDto = MessageDto.builder().message(message)
								.emaild(employeeFromDb.get().getEmployeeEmail()).build();
						return Optional.ofNullable(messageDto);

					} else {
						throw new BatchDetailsNotFoundException("unable to find the batch details");

					}
				}
			}
		}
		return Optional.ofNullable(null);
	}

	@Override
	public Optional<List<MentorDto>> getMentors() {
		Optional<List<Mentor>> mentorsFromDb = mentorRepository.getMentors();
		if (mentorsFromDb.isPresent()) {
			List<MentorDto> mentorDto = Lists.newArrayList();
			for (Mentor mentor : mentorsFromDb.get()) {
				MentorDto mentorDto2 = new MentorDto();
				BeanUtils.copyProperties(mentor, mentorDto2);
				for (Skills skills : mentor.getSkills()) {
					SkillsDto skillsDto2 = new SkillsDto();
					BeanUtils.copyProperties(skills, skillsDto2);
					mentorDto2.getSkillsDto().add(skillsDto2);
				}
				mentorDto.add(mentorDto2);
			}
			return Optional.ofNullable(mentorDto);
		}
		return Optional.ofNullable(null);
	}

	@Override
	public Optional<List<BatchDto>> getBatchDetails() {
		Optional<List<Batch>> batchesFromDb = batchRepository.getBatches();
		if (batchesFromDb.isPresent()) {
			List<BatchDto> batchDtos = Lists.newArrayList();
			for (Batch batch : batchesFromDb.get()) {
				BatchDto newBatchDto = new BatchDto();
				BeanUtils.copyProperties(batch, newBatchDto);
				Optional<String> optMentorName = Optional.ofNullable(batch.getMentor().getMentorName());
				if (optMentorName.isPresent()) {
					newBatchDto.setMentorName(batch.getMentor().getMentorName());
				}
				for (Technologies technologies : batch.getTechnologies()) {
					TechnologiesDto technologiesDto = new TechnologiesDto();
					BeanUtils.copyProperties(technologies, technologiesDto);
					newBatchDto.getTechnologiesDto().add(technologiesDto);
				}
				batchDtos.add(newBatchDto);
			}
			return Optional.ofNullable(batchDtos);
		}

		return Optional.ofNullable(null);
	}

	@Override
	public Optional<MessageDto> rejectEmployee(String empId, RejectDto rejectDto) {
		Optional<RequestList> optEmployee = requestRepository.findById(empId);
		if (optEmployee.isPresent()) {
			Optional<Employee> employeeFromDb = employeeRepository.findById(empId);
			if (employeeFromDb.isPresent()) {
				employeeFromDb.get().setEmployeeStatus(Status.INACTIVE);
				requestRepository.deleteById(empId);
				String message = "Hello " + optEmployee.get().getEmployeeName() + "\n"
						+ "We appreciate your interest and the time you invested in applying for the position. "
						+ "We regret to inform you that you did not make it to the next round. \n"
						+ rejectDto.getReason();
				MessageDto messageDto = MessageDto.builder().message(message)
						.emaild(employeeFromDb.get().getEmployeeEmail()).build();
				return Optional.of(messageDto);
			}

		}
		return Optional.ofNullable(null);
	}

	@Override
	public Optional<Object> getEmployee(String employeeId) {
		Optional<Employee> empFromDb = employeeRepository.findById(employeeId);
		if (empFromDb.isPresent()) {
			Employee employee = empFromDb.get();
			EmployeeDto employeeDto = new EmployeeDto();
			BeanUtils.copyProperties(employee, employeeDto);
			
			employeeDto.setEmployeeGender(employee.getGender());
			employeeDto.setEmployeeEmailId(employee.getEmployeeId());
			employeeDto.setEmployeeDesignation(employee.getDesignation());
			
			SecondaryInfoDto secondaryInfoDto = new SecondaryInfoDto();
			BeanUtils.copyProperties(employee.getSecondaryInfo(), secondaryInfoDto);
			employeeDto.setSecondaryInfoDto(secondaryInfoDto);

			employeeDto.setEmployeeStatus(employee.getEmployeeStatus());

			BankDetailsDto bankDetailsDto = new BankDetailsDto();
			BeanUtils.copyProperties(employee.getBankDetails(), bankDetailsDto);
			employeeDto.setBankDetailsDto(bankDetailsDto);

			for (EducationDetails educationDetails : employee.getEducationDetails()) {
				EducationDetailsDto educationDetailsDto2 = new EducationDetailsDto();
				BeanUtils.copyProperties(educationDetails, educationDetailsDto2);
				employeeDto.getEducationDetailsDto().add(educationDetailsDto2);
			}

			for (AddressDetails addressDetails : employee.getAddressDetails()) {
				AddressDetailsDto addressDetailsDto2 = new AddressDetailsDto();
				BeanUtils.copyProperties(addressDetails, addressDetailsDto2);
				employeeDto.getAddressDetailsDto().add(addressDetailsDto2);
			}

			for (Experience experience : employee.getExperience()) {
				ExperienceDto experienceDto2 = new ExperienceDto();
				BeanUtils.copyProperties(experience, experienceDto2);
				employeeDto.getExperienceDto().add(experienceDto2);
			}

			for (Contact contact : employee.getContact()) {
				ContactDto contactDto2 = new ContactDto();
				BeanUtils.copyProperties(contact, contactDto2);
				employeeDto.getContactDto().add(contactDto2);
			}

			for (TechnicalSkills technicalSkills : employee.getTechnicalSkills()) {
				TechnicalSkillsDto technicalSkillsDto2 = new TechnicalSkillsDto();
				BeanUtils.copyProperties(technicalSkills, technicalSkillsDto2);
				employeeDto.getTechnicalSkillsDto().add(technicalSkillsDto2);
			}
			return Optional.ofNullable(employeeDto);

		}
		Optional<Mentor> mentorFromDb = mentorRepository.findById(employeeId);
		if (mentorFromDb.isPresent()) {
			MentorDto mentorDto = new MentorDto();
			BeanUtils.copyProperties(mentorFromDb.get(), mentorDto);

			for (Skills skills : mentorFromDb.get().getSkills()) {
				SkillsDto skillsDto2 = new SkillsDto();
				BeanUtils.copyProperties(skills, skillsDto2);
				mentorDto.getSkillsDto().add(skillsDto2);
			}
			return Optional.ofNullable(mentorDto);
		}

		return Optional.ofNullable(null);
	}
}