package com.te.lms.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.response.RegistrationResponse;
import com.te.lms.service.AdminService;

@SpringBootTest
@AutoConfigureMockMvc
public class AdminControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private AdminService adminService;

	@InjectMocks
	private AdminController adminController;

	@Autowired
	private ObjectMapper objectMapper;

	// test case for registering mentor successfully.......
	@Test
	public void testRegisterMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDto = Lists.newArrayList();
		SkillsDto skillDto = new SkillsDto();
		skillDto.setSkillName("Java");
		skillsDto.add(skillDto);
		MentorDto mentorDto = MentorDto.builder().emailId("a@a.com").mentorName("Rakesh").employeeId("TY002")
				.skillsDto(skillsDto).build();
		MessageDto messageDto = MessageDto.builder().emaild("a@a.com").message("message").build();

		Mockito.when(adminService.register(Mockito.any())).thenReturn(Optional.ofNullable(messageDto.getMessage()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.post("/admin/register/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
		RegistrationResponse<String> readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("mentor has been registered Successfully", readValue.getMessage());
	}

	@Test
	public void testUpdateMentor_Returns400() throws Exception {

		UpdateMentorDto updateMentorDto = new UpdateMentorDto();

		Mockito.when(adminService.updateMentor(Mockito.any(), Mockito.any())).thenReturn(Optional.ofNullable(false));

		mockMvc.perform(MockMvcRequestBuilders.put("/admin/update/{empId}", "TE001")
				.accept(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(updateMentorDto))
				.contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isBadRequest());
	}
	
	// TestCase to delete mentor
		@Test
		public void testDeleteMentor() throws Exception {

			MentorDto mentorDto = MentorDto.builder().emailId("s@s.com").employeeId("TE001").mentorName("srikar")
					.skillsDto(Lists.newArrayList()).build();
			List<SkillsDto> skills = Lists.newArrayList();
			SkillsDto skillDto = new SkillsDto();
			skillDto.setSkillName("skill-1");
			skills.add(skillDto);
			mentorDto.setSkillsDto(skills);

			Mockito.when(adminService.deleteMentor(mentorDto.getEmployeeId())).thenReturn(true);

			mockMvc.perform(MockMvcRequestBuilders.put("/admin/mentor/delete/{empId}", "TE001")
					.contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(mentorDto)))
					.andExpect(MockMvcResultMatchers.status().isOk());

		}
		
		// test case to delete mentor that return Error 400
		@Test
		public void testDeleteMentor_Returns400() throws Exception {
			MentorDto mentorDto = new MentorDto();
			Mockito.when(adminService.deleteMentor(mentorDto.getEmployeeId())).thenReturn(false);

			mockMvc.perform(MockMvcRequestBuilders.put("/admin/mentor/delete/{empId}", "TE001")
					.contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isBadRequest());

		}
		
		// test case to update mentor successfully.....
		@Test
		public void testUpdateMentor() throws Exception {
			UpdateMentorDto updateMentorDto = UpdateMentorDto.builder().emailId("s@s.com").mentorName("Srikar")
					.skillsDto(Lists.newArrayList()).build();
			List<SkillsDto> skills = Lists.newArrayList();
			SkillsDto skillDto = new SkillsDto();
			skillDto.setSkillName("skill-1");
			skills.add(skillDto);
			updateMentorDto.setSkillsDto(skills);

			Mockito.when(adminService.updateMentor(Mockito.any(), Mockito.any())).thenReturn(Optional.ofNullable(true));

			String contentAsString = mockMvc
					.perform(MockMvcRequestBuilders.put("/admin/update/{empId}", "TE001")
							.accept(MediaType.APPLICATION_JSON_VALUE)
							.content(objectMapper.writeValueAsString(updateMentorDto))
							.contentType(MediaType.APPLICATION_JSON))
					.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
			RegistrationResponse<String> readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
			assertEquals("mentor details are updated successfully", readValue.getMessage());
		}

		
}
